import asyncio
import re
import math
import random
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from info import ADMINS, IMDB, PROTECT_CONTENT, AUTO_DELETE, DELETE_TIME, GRP_LNK, OWNER_LNK
from Script import script
from database.ia_filterdb import get_search_results, get_file_details
from utils.helpers import check_fsub, get_size, is_user_verified, get_verify_token, get_shortlink, HOW_TO_VERIFY, TUTORIAL
from utils.temp import temp

# --- ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
@Client.on_message(filters.text & (filters.group | filters.private) & ~filters.command(["start", "stats", "broadcast", "addfsub", "delfsub", "fsublist"]))
@check_fsub
async def auto_filter_handler(client, message):
    # ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßã‡ßü‡ßá‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
    query = message.text
    search = re.sub(r'(_|\-|\.|\+|\(|\))', ' ', query).strip()
    
    if len(search) < 2:
        return

    # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    files, next_offset, total_results = await get_search_results(query=search, max_results=5)
    
    if not files:
        # ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶≠‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï, ‡¶™‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)
        return

    # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
    if not await is_user_verified(message.from_user.id):
        token = await get_verify_token(message.from_user.id, files[0].file_id)
        verify_link = f"{URL}verify?token={token}" # ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü (‡¶™‡¶∞‡ßá stream.py ‡¶§‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶¨‡ßá)
        short_verify_link = await get_shortlink(verify_link)

        buttons = [
            [InlineKeyboardButton("‚úÖ Click Here to Verify ‚úÖ", url=short_verify_link)],
            [InlineKeyboardButton("üí° How to Verify üí°", url=HOW_TO_VERIFY)]
        ]
        await message.reply_text("‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡ßá‡¶§‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=InlineKeyboardMarkup(buttons))
        return

    # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
    buttons = []
    for file in files:
        file_id = file.file_id
        file_name = file.file_name
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÇ {file_name} [{get_size(file.file_size)}]",
                callback_data=f"file#{file_id}"
            )
        ])
    
    if next_offset:
        buttons.append([
            InlineKeyboardButton("Next ‚û°Ô∏è", callback_data=f"next#{search}#{next_offset}")
        ])

    # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    if IMDB:
        # IMDB ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ (‡¶™‡¶∞‡ßá imdb.py ‡¶™‡ßç‡¶≤‡¶æ‡¶ó‡¶á‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá)
        await message.reply_text(
            f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ '{query}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø {total_results} ‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await message.reply_text(
            f"'{query}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )


@Client.on_callback_query(filters.regex(r'^file#'))
async def file_callback_handler(client, query):
    _, file_id = query.data.split("#")
    
    file_details = await get_file_details(file_id)
    if not file_details:
        return await query.answer("‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    
    file_info = file_details[0]
    
    # ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∂‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    main_link = f"https://t.me/{temp.BOT_USERNAME}?start=file_{file_id}"
    download_link = await get_shortlink(main_link)
    
    buttons = [
        [InlineKeyboardButton("üì• Download Now üì•", url=download_link)],
        [InlineKeyboardButton("üí° How to Download üí°", url=TUTORIAL)]
    ]
    
    # ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    await query.answer("‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", show_alert=True)
    
    msg = await client.send_cached_media(
        chat_id=query.from_user.id,
        file_id=file_id,
        caption=f"**{file_info.file_name}**",
        protect_content=PROTECT_CONTENT,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    if AUTO_DELETE:
        await asyncio.sleep(DELETE_TIME)
        await msg.delete()
