import logging
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.users_chats_db import db
from info import ADMINS

logger = logging.getLogger(__name__)

# ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def get_channel_info(client, channel_id):
    try:
        chat = await client.get_chat(channel_id)
        return chat.title, chat.username
    except Exception as e:
        logger.error(f"Error getting info for channel {channel_id}: {e}")
        return f"Unknown Channel", None

@Client.on_message(filters.command("addfsub") & filters.user(ADMINS))
async def add_fsub_command(client, message):
    if len(message.command) != 3:
        await message.reply_text(
            "<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ:</b>\n`/addfsub <channel_id> <public/private>`\n\n"
            "<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b>\n`/addfsub -10012345678 public`"
        )
        return

    try:
        channel_id = int(message.command[1])
        channel_type = message.command[2].lower()

        if channel_type not in ["public", "private"]:
            await message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á `public` ‡¶Ö‡¶•‡¶¨‡¶æ `private` ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return
            
        if await db.is_fsub_channel_exist(channel_id):
            await message.reply_text("‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶Ü‡¶õ‡ßá‡•§")
            return

        try:
            member = await client.get_chat_member(channel_id, "me")
            if member.status not in [enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER]:
                await message.reply_text("‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                return
        except Exception:
            await message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø‡¶ü‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶®‡¶á‡•§")
            return

        await db.add_fsub_channel(channel_id, channel_type)
        title, _ = await get_channel_info(client, channel_id)
        await message.reply_text(f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ '{title}' (`{channel_id}`) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá `{channel_type}` ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    except ValueError:
        await message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
    except Exception as e:
        await message.reply_text(f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")


@Client.on_message(filters.command("delfsub") & filters.user(ADMINS))
async def del_fsub_command(client, message):
    if len(message.command) != 2:
        await message.reply_text("<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ:</b> `/delfsub <channel_id>`")
        return

    try:
        channel_id = int(message.command[1])
        
        if not await db.is_fsub_channel_exist(channel_id):
            await message.reply_text("‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
            return

        await db.remove_fsub_channel(channel_id)
        await message.reply_text(f"üóëÔ∏è ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ `{channel_id}` ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    except ValueError:
        await message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
    except Exception as e:
        await message.reply_text(f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")


@Client.on_message(filters.command("fsublist") & filters.user(ADMINS))
async def fsub_list_command(client, message):
    public, private = await db.get_fsub_channels()
    
    if not public and not private:
        await message.reply_text("‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶æ‡¶á‡¶¨‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")
        return

    text = "üìú **‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶æ‡¶á‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:**\n\n"

    text += "üåê **‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ (‡¶ú‡ßü‡ßá‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá):**\n"
    if public:
        for cid in public:
            title, _ = await get_channel_info(client, cid)
            text += f" - `{cid}` ({title})\n"
    else:
        text += " - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶®‡ßá‡¶á‡•§\n"

    text += "\nüîí **‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ (‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá):**\n"
    if private:
        for cid in private:
            title, _ = await get_channel_info(client, cid)
            text += f" - `{cid}` ({title})\n"
    else:
        text += " - ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶®‡ßá‡¶á‡•§"

    await message.reply_text(text)
