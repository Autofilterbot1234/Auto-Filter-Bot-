import logging
import asyncio
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from info import ADMINS
from database.ia_filterdb import MediaModels

logger = logging.getLogger(__name__)

@Client.on_message(filters.command("delete") & filters.user(ADMINS))
async def delete_files_command(client, message):
    if len(message.command) == 1:
        return await message.reply_text(
            "<b>ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рзЯржо:</b> `/delete <keyword>`\n\n"
            "ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ ржХрж┐ржУрзЯрж╛рж░рзНржб рж╕ржорзНржкрж░рзНржХрж┐ржд рж╕ржм ржлрж╛ржЗрж▓ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓ржмрзЗред"
        )
    
    keyword = message.text.split(" ", 1)[1]
    
    buttons = [
        [
            InlineKeyboardButton("тЬЕ Yes, Delete тЬЕ", callback_data=f"confirm_delete_keyword#{keyword}"),
            InlineKeyboardButton("тЭМ No, Cancel тЭМ", callback_data="cancel_delete")
        ]
    ]
    
    await message.reply_text(
        f"ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ '<b>{keyword}</b>' рж╕ржорзНржкрж░рзНржХрж┐ржд рж╕ржм ржлрж╛ржЗрж▓ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи?\n\n"
        "<b>тЪая╕П ржПржЗ ржХрж╛ржЬржЯрж┐ ржЖрж░ ржлрзЗрж░рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛!</b>",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("deleteall") & filters.user(ADMINS))
async def delete_all_files_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("ЁЯФ┤ YES, DELETE ALL ЁЯФ┤", callback_data="confirm_delete_all"),
            InlineKeyboardButton("ЁЯЯв CANCEL ЁЯЯв", callback_data="cancel_delete")
        ]
    ]
    await message.reply_text(
        "ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ **рж╕ржорж╕рзНржд ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рж╕ржм ржлрж╛ржЗрж▓** ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи?\n\n"
        "<b>тЪая╕ПтЪая╕ПтЪая╕П ржПржЗ ржХрж╛ржЬржЯрж┐ ржЕрждрзНржпржирзНржд ржЭрзБржБржХрж┐ржкрзВрж░рзНржг ржПржмржВ ржХрзЛржирзЛржнрж╛ржмрзЗржЗ ржлрзЗрж░рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛!</b>",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_callback_query(filters.regex(r'^confirm_delete_keyword#'))
async def confirm_delete_keyword_callback(client, query):
    _, keyword = query.data.split("#")
    await query.message.edit_text(f"'{keyword}' рж╕ржорзНржкрж░рзНржХрж┐ржд ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ ржПржмржВ ржорзЛржЫрж╛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")
    
    deleted_count = 0
    total_files_checked = 0
    
    for model in MediaModels:
        try:
            # Regex ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХрж┐ржУрзЯрж╛рж░рзНржб ржжрж┐рзЯрзЗ ржлрж╛ржЗрж▓ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ
            filter_ = {'file_name': {'$regex': keyword, '$options': 'i'}}
            result = await model.collection.delete_many(filter_)
            deleted_count += result.deleted_count
        except Exception as e:
            logger.error(f"Error deleting files from a DB collection: {e}")

    await query.message.edit_text(f"тЬЕ рж╕ржорзНржкржирзНржи!\n\n`{deleted_count}` ржЯрж┐ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")

@Client.on_callback_query(filters.regex(r'^confirm_delete_all$'))
async def confirm_delete_all_callback(client, query):
    await query.message.edit_text("рж╕ржорж╕рзНржд ржлрж╛ржЗрж▓ ржорзЛржЫрж╛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ... ржПржЯрж┐ ржХрж┐ржЫрзБ рж╕ржорзЯ ржирж┐рждрзЗ ржкрж╛рж░рзЗред")
    
    deleted_count = 0
    try:
        for model in MediaModels:
            count = await model.count_documents({})
            await model.collection.drop() # рж╕ржорзНржкрзВрж░рзНржг ржХрж╛рж▓рзЗржХрж╢ржи ржбрзНрж░ржк ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
            deleted_count += count
    except Exception as e:
        logger.error(f"Error dropping collections: {e}")
        return await query.message.edit_text(f"ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        
    await query.message.edit_text(f"тЬЕ рж╕ржорзНржкржирзНржи!\n\nрж╕ржорж╕рзНржд ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржорзЛржЯ `{deleted_count}` ржЯрж┐ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")
    
@Client.on_callback_query(filters.regex(r'^cancel_delete$'))
async def cancel_delete_callback(client, query):
    await query.message.edit_text("тЭМ ржлрж╛ржЗрж▓ ржорзЛржЫрж╛рж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
